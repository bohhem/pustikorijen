generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model geo_states {
  state_id   String       @id @db.VarChar(20)
  name       String       @db.VarChar(150)
  iso2       String?      @db.VarChar(5)
  iso3       String?      @db.VarChar(5)
  wikidata_id String?     @db.VarChar(50)
  latitude   Float?
  longitude  Float?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  geo_regions geo_regions[]
  geo_cities  geo_cities[]
}

model geo_regions {
  region_id        String        @id @db.VarChar(50)
  state_id         String        @db.VarChar(20)
  parent_region_id String?       @db.VarChar(50)
  name             String        @db.VarChar(150)
  name_native      String?       @db.VarChar(150)
  code             String?       @db.VarChar(20)
  type             String        @db.VarChar(50)
  seat             String?       @db.VarChar(150)
  wikidata_id      String?       @db.VarChar(50)
  latitude         Float?
  longitude        Float?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  state            geo_states    @relation(fields: [state_id], references: [state_id])
  parent_region    geo_regions?  @relation("RegionChildren", fields: [parent_region_id], references: [region_id])
  child_regions    geo_regions[] @relation("RegionChildren")
  cities           geo_cities[]  @relation("CityRegion")
  entity_cities    geo_cities[]  @relation("CityEntityRegion")

  @@index([state_id])
  @@index([parent_region_id])
  @@index([code])
}

model geo_cities {
  city_id         String                    @id @db.VarChar(60)
  state_id        String                    @db.VarChar(20)
  region_id       String?                   @db.VarChar(50)
  entity_region_id String?                  @db.VarChar(50)
  name            String                    @db.VarChar(150)
  slug            String                    @db.VarChar(150)
  city_code       String                    @db.VarChar(10)
  wikidata_id     String?                   @db.VarChar(50)
  is_official_city Boolean                  @default(false)
  latitude        Float?
  longitude       Float?
  population_2013 Int?
  num_settlements Int?
  density_per_km2 Float?
  area_km2        Float?
  created_at      DateTime                  @default(now())
  updated_at      DateTime                  @updatedAt
  state           geo_states                @relation(fields: [state_id], references: [state_id])
  region          geo_regions?              @relation("CityRegion", fields: [region_id], references: [region_id])
  entity_region   geo_regions?              @relation("CityEntityRegion", fields: [entity_region_id], references: [region_id])
  family_branches family_branches[]
  guru_business_addresses guru_business_addresses[]
  person_business_addresses person_business_addresses[]
  branch_placeholders branch_placeholders[] @relation("placeholder_geo_city")

  @@index([state_id])
  @@index([region_id])
  @@index([slug])
  @@index([city_code])
}

model admin_regions {
  region_id              String                   @id
  name                   String                   @db.VarChar(150)
  code                   String                   @unique @db.VarChar(50)
  description            String?
  country                String?                  @db.VarChar(100)
  created_at             DateTime                 @default(now())
  updated_at             DateTime
  family_branches        family_branches[]
  super_guru_assignments super_guru_assignments[]

  @@index([code])
}

model audit_log {
  audit_id                           String           @id
  entity_type                        String           @db.VarChar(50)
  entity_id                          String           @db.VarChar(100)
  action_type                        String           @db.VarChar(50)
  field_changed                      String?          @db.VarChar(100)
  old_value                          String?
  new_value                          String?
  branch_id                          String?          @db.VarChar(50)
  person_id                          String?
  source_type                        String?          @db.VarChar(50)
  source_documentation               String?
  user_id                            String?
  reason                             String?
  quality_score                      Int?
  verification_status                String           @default("unverified") @db.VarChar(50)
  is_disputed                        Boolean          @default(false)
  disputed_by                        String?
  dispute_id                         String?          @db.VarChar(50)
  root_change_id                     String?          @db.VarChar(50)
  merge_id                           String?          @db.VarChar(50)
  ip_address                         String?          @db.Inet
  user_agent                         String?
  created_at                         DateTime         @default(now())
  family_branches                    family_branches? @relation(fields: [branch_id], references: [branch_id])
  users_audit_log_disputed_byTousers users?           @relation("audit_log_disputed_byTousers", fields: [disputed_by], references: [user_id])
  persons                            persons?         @relation(fields: [person_id], references: [person_id])
  users_audit_log_user_idTousers     users?           @relation("audit_log_user_idTousers", fields: [user_id], references: [user_id])

  @@index([branch_id])
  @@index([created_at(sort: Desc)])
  @@index([entity_type, entity_id])
  @@index([is_disputed])
  @@index([person_id])
  @@index([user_id])
}

model branch_members {
  member_id                               String          @id
  branch_id                               String          @db.VarChar(50)
  user_id                                 String
  role                                    String          @default("member") @db.VarChar(50)
  person_id                               String?
  can_edit_generations                    String?         @db.VarChar(50)
  auto_approve_photos                     Boolean         @default(false)
  auto_approve_stories                    Boolean         @default(false)
  status                                  String          @default("pending") @db.VarChar(20)
  invited_by                              String?
  approved_by                             String?
  approved_at                             DateTime?
  contribution_count                      Int             @default(0)
  last_contribution                       DateTime?
  joined_at                               DateTime        @default(now())
  updated_at                              DateTime
  join_message                            String?
  users_branch_members_approved_byTousers users?          @relation("branch_members_approved_byTousers", fields: [approved_by], references: [user_id])
  family_branches                         family_branches @relation(fields: [branch_id], references: [branch_id])
  users_branch_members_invited_byTousers  users?          @relation("branch_members_invited_byTousers", fields: [invited_by], references: [user_id])
  persons                                 persons?        @relation(fields: [person_id], references: [person_id])
  users_branch_members_user_idTousers     users           @relation("branch_members_user_idTousers", fields: [user_id], references: [user_id])

  @@unique([branch_id, user_id])
  @@index([branch_id])
  @@index([branch_id, role])
  @@index([branch_id, status])
  @@index([user_id])
}

model branch_person_links {
  link_id                                          String          @id
  person_id                                        String
  branch_id                                        String          @db.VarChar(50)
  source_branch_id                                 String          @db.VarChar(50)
  status                                           String          @default("pending") @db.VarChar(30)
  display_name                                     String?         @db.VarChar(255)
  notes                                            String?
  requested_by                                     String
  source_approved_by                               String?
  source_approved_at                               DateTime?
  target_approved_by                               String?
  target_approved_at                               DateTime?
  created_at                                       DateTime         @default(now())
  updated_at                                       DateTime         @updatedAt
  persons                                          persons          @relation(fields: [person_id], references: [person_id])
  family_branches                                  family_branches  @relation(fields: [branch_id], references: [branch_id])
  users_branch_person_links_requested_byTousers    users            @relation("branch_person_links_requested_byTousers", fields: [requested_by], references: [user_id])
  users_branch_person_links_source_approved_byTousers users?        @relation("branch_person_links_source_approved_byTousers", fields: [source_approved_by], references: [user_id])
  users_branch_person_links_target_approved_byTousers users?        @relation("branch_person_links_target_approved_byTousers", fields: [target_approved_by], references: [user_id])

  @@unique([person_id, branch_id])
  @@index([branch_id, status])
  @@index([source_branch_id, status])
  @@index([requested_by])
}

model disputes {
  dispute_id                        String           @id @db.VarChar(50)
  entity_type                       String           @db.VarChar(50)
  entity_id                         String           @db.VarChar(100)
  field_name                        String?          @db.VarChar(100)
  current_value                     String?
  proposed_value                    String?
  raised_by                         String
  affected_branch                   String?          @db.VarChar(50)
  status                            String           @default("pending") @db.VarChar(50)
  level                             Int              @default(1)
  deadline                          DateTime?
  resolved_at                       DateTime?
  resolved_by                       String?
  evidence                          Json?
  explanation                       String?
  resolution_reasoning              String?
  family_votes                      Json?
  guru_votes                        Json?
  expert_reviews                    Json?
  final_decision                    String?
  accepted_value                    String?
  created_at                        DateTime         @default(now())
  updated_at                        DateTime
  family_branches                   family_branches? @relation(fields: [affected_branch], references: [branch_id])
  users_disputes_raised_byTousers   users            @relation("disputes_raised_byTousers", fields: [raised_by], references: [user_id])
  users_disputes_resolved_byTousers users?           @relation("disputes_resolved_byTousers", fields: [resolved_by], references: [user_id])

  @@index([affected_branch])
  @@index([entity_type, entity_id])
  @@index([raised_by])
  @@index([status])
}

model documents {
  document_id                        String          @id
  branch_id                          String          @db.VarChar(50)
  person_id                          String?
  story_id                           String?
  file_name                          String          @db.VarChar(500)
  file_type                          String          @db.VarChar(100)
  file_size                          Int
  file_url                           String          @db.VarChar(1000)
  thumbnail_url                      String?         @db.VarChar(1000)
  document_type                      String?         @db.VarChar(100)
  title                              String?         @db.VarChar(500)
  description                        String?
  document_date                      DateTime?       @db.Date
  extracted_text                     String?
  quality_score                      Int             @default(0)
  is_verified                        Boolean         @default(false)
  verified_by                        String?
  uploaded_by                        String
  visibility                         String          @default("family_only") @db.VarChar(50)
  created_at                         DateTime        @default(now())
  updated_at                         DateTime
  family_branches                    family_branches @relation(fields: [branch_id], references: [branch_id])
  persons                            persons?        @relation(fields: [person_id], references: [person_id])
  stories                            stories?        @relation(fields: [story_id], references: [story_id])
  users_documents_uploaded_byTousers users           @relation("documents_uploaded_byTousers", fields: [uploaded_by], references: [user_id])
  users_documents_verified_byTousers users?          @relation("documents_verified_byTousers", fields: [verified_by], references: [user_id])

  @@index([branch_id])
  @@index([document_type])
  @@index([person_id])
  @@index([uploaded_by])
}

model family_branches {
  branch_id             String                  @id @db.VarChar(50)
  surname               String                  @db.VarChar(100)
  surname_normalized    String                  @db.VarChar(100)
  city_code             String                  @db.VarChar(10)
  city_name             String                  @db.VarChar(100)
  region                String?                 @db.VarChar(100)
  country               String                  @default("Bosnia and Herzegovina") @db.VarChar(100)
  geo_city_id           String?                 @db.VarChar(60)
  root_person_id        String?
  oldest_ancestor_year  Int?
  total_people          Int                     @default(0)
  total_generations     Int                     @default(0)
  description           String?
  founded_by            String?
  visibility            String                  @default("public") @db.VarChar(20)
  is_verified           Boolean                 @default(false)
  verification_date     DateTime?
  root_change_count     Int                     @default(0)
  last_major_update     DateTime?
  created_at            DateTime                @default(now())
  updated_at            DateTime
  admin_region_id       String?
  audit_log             audit_log[]
  branch_members        branch_members[]
  branch_person_links   branch_person_links[]
  disputes              disputes[]
  documents             documents[]
  admin_regions         admin_regions?          @relation(fields: [admin_region_id], references: [region_id])
  users                 users?                  @relation(fields: [founded_by], references: [user_id])
  partnerships          partnerships[]
  persons               persons[]
  root_change_proposals root_change_proposals[]
  stories               stories[]
  geo_city              geo_cities?             @relation(fields: [geo_city_id], references: [city_id])
  placeholders          branch_placeholders[]
  person_claims         person_claims[]

  @@index([admin_region_id])
  @@index([geo_city_id])
  @@index([city_code])
  @@index([surname_normalized])
  @@index([visibility])
}

model person_claims {
  claim_id        String          @id
  branch_id       String          @db.VarChar(50)
  person_id       String
  user_id         String
  message         String?
  status          String          @default("pending") @db.VarChar(20)
  resolution_notes String?
  resolved_at     DateTime?
  resolved_by     String?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  family_branches family_branches @relation(fields: [branch_id], references: [branch_id])
  person          persons         @relation("person_claim_person", fields: [person_id], references: [person_id])
  user            users           @relation("person_claims_user", fields: [user_id], references: [user_id])
  resolver        users?          @relation("person_claims_resolver", fields: [resolved_by], references: [user_id])

  @@index([branch_id, status])
  @@index([user_id, status])
}

model notifications {
  notification_id String    @id
  user_id         String
  type            String    @db.VarChar(100)
  title           String    @db.VarChar(500)
  message         String
  entity_type     String?   @db.VarChar(50)
  entity_id       String?   @db.VarChar(100)
  action_url      String?   @db.VarChar(500)
  is_read         Boolean   @default(false)
  read_at         DateTime?
  priority        String    @default("normal") @db.VarChar(20)
  sent_via_email  Boolean   @default(false)
  email_sent_at   DateTime?
  created_at      DateTime  @default(now())
  users           users     @relation(fields: [user_id], references: [user_id])

  @@index([created_at(sort: Desc)])
  @@index([user_id, is_read])
}

model guru_business_addresses {
  address_id           String     @id @db.VarChar(50)
  user_id              String
  geo_city_id          String     @db.VarChar(60)
  label                String?    @db.VarChar(100)
  address_line1        String?    @db.VarChar(255)
  address_line2        String?    @db.VarChar(255)
  postal_code          String?    @db.VarChar(20)
  latitude             Float?
  longitude            Float?
  google_maps_place_id String?    @db.VarChar(255)
  google_maps_url      String?    @db.VarChar(500)
  is_public            Boolean    @default(true)
  created_at           DateTime   @default(now())
  updated_at           DateTime   @updatedAt
  user                 users      @relation(fields: [user_id], references: [user_id])
  geo_city             geo_cities @relation(fields: [geo_city_id], references: [city_id])

  @@unique([user_id])
  @@index([geo_city_id])
}

model partnerships {
  partnership_id                           String          @id
  branch_id                                String          @db.VarChar(50)
  person1_id                               String
  person2_id                               String
  partnership_type                         String          @default("marriage") @db.VarChar(50)
  start_date                               DateTime?       @db.Date
  start_place                              String?         @db.VarChar(255)
  end_date                                 DateTime?       @db.Date
  end_place                                String?         @db.VarChar(255)
  end_reason                               String?         @db.VarChar(50)
  status                                   String          @default("active") @db.VarChar(20)
  is_current                               Boolean         @default(true)
  order_number                             Int             @default(1)
  notes                                    String?
  ceremony_type                            String?         @db.VarChar(100)
  created_by                               String?
  quality_score                            Int             @default(0)
  verification_level                       Int             @default(1)
  is_verified                              Boolean         @default(false)
  verified_by                              String?
  verified_at                              DateTime?
  visibility                               String          @default("family_only") @db.VarChar(20)
  created_at                               DateTime        @default(now())
  updated_at                               DateTime
  family_branches                          family_branches @relation(fields: [branch_id], references: [branch_id])
  users_partnerships_created_byTousers     users?          @relation("partnerships_created_byTousers", fields: [created_by], references: [user_id])
  persons_partnerships_person1_idTopersons persons         @relation("partnerships_person1_idTopersons", fields: [person1_id], references: [person_id], onDelete: Cascade)
  persons_partnerships_person2_idTopersons persons         @relation("partnerships_person2_idTopersons", fields: [person2_id], references: [person_id], onDelete: Cascade)
  users_partnerships_verified_byTousers    users?          @relation("partnerships_verified_byTousers", fields: [verified_by], references: [user_id])

  @@unique([person1_id, person2_id, order_number])
  @@index([branch_id])
  @@index([person1_id])
  @@index([person2_id])
  @@index([start_date])
  @@index([status])
}

model persons {
  person_id                                                               String                  @id
  branch_id                                                               String                  @db.VarChar(50)
  full_name                                                               String                  @db.VarChar(255)
  given_name                                                              String?                 @db.VarChar(100)
  surname                                                                 String?                 @db.VarChar(100)
  maiden_name                                                             String?                 @db.VarChar(100)
  nickname                                                                String?                 @db.VarChar(100)
  birth_year                                                              Int?
  birth_date                                                              DateTime?               @db.Date
  birth_place                                                             String?                 @db.VarChar(255)
  death_year                                                              Int?
  death_date                                                              DateTime?               @db.Date
  death_place                                                             String?                 @db.VarChar(255)
  is_living                                                               Boolean?
  current_location                                                        String?                 @db.VarChar(255)
  current_country                                                         String?                 @db.VarChar(100)
  gender                                                                  String?                 @db.VarChar(20)
  occupation                                                              String?                 @db.VarChar(255)
  education                                                               String?
  biography                                                               String?
  profile_photo_url                                                       String?                 @db.VarChar(500)
  generation                                                              String?                 @db.VarChar(10)
  generation_number                                                       Int?
  is_branch_root                                                          Boolean                 @default(false)
  father_id                                                               String?
  mother_id                                                               String?
  reference_code                                                          String?                 @db.VarChar(100)
  url_slug                                                                String?                 @db.VarChar(255)
  quality_score                                                           Int                     @default(0)
  verification_level                                                      Int                     @default(1)
  is_verified                                                             Boolean                 @default(false)
  verified_by                                                             String?
  verified_at                                                             DateTime?
  created_from_root_change                                                String?                 @db.VarChar(50)
  created_by                                                              String?
  visibility                                                              String                  @default("family_only") @db.VarChar(20)
  share_in_ledger                                                         Boolean                 @default(false)
  estimated_birth_year                                                    Int?
  created_at                                                              DateTime                @default(now())
  updated_at                                                              DateTime
  audit_log                                                               audit_log[]
  branch_members                                                          branch_members[]
  documents                                                               documents[]
  partnerships_partnerships_person1_idTopersons                           partnerships[]          @relation("partnerships_person1_idTopersons")
  partnerships_partnerships_person2_idTopersons                           partnerships[]          @relation("partnerships_person2_idTopersons")
  family_branches                                                         family_branches         @relation(fields: [branch_id], references: [branch_id])
  users_persons_created_byTousers                                         users?                  @relation("persons_created_byTousers", fields: [created_by], references: [user_id])
  persons_persons_father_idTopersons                                      persons?                @relation("persons_father_idTopersons", fields: [father_id], references: [person_id])
  other_persons_persons_father_idTopersons                                persons[]               @relation("persons_father_idTopersons")
  persons_persons_mother_idTopersons                                      persons?                @relation("persons_mother_idTopersons", fields: [mother_id], references: [person_id])
  other_persons_persons_mother_idTopersons                                persons[]               @relation("persons_mother_idTopersons")
  users_persons_verified_byTousers                                        users?                  @relation("persons_verified_byTousers", fields: [verified_by], references: [user_id])
  relationships_relationships_person1_idTopersons                         relationships[]         @relation("relationships_person1_idTopersons")
  relationships_relationships_person2_idTopersons                         relationships[]         @relation("relationships_person2_idTopersons")
  root_change_proposals_root_change_proposals_new_root_person_idTopersons root_change_proposals[] @relation("root_change_proposals_new_root_person_idTopersons")
  root_change_proposals_root_change_proposals_old_root_person_idTopersons root_change_proposals[] @relation("root_change_proposals_old_root_person_idTopersons")
  branch_person_links                                                        branch_person_links[]
  person_business_addresses                                                 person_business_addresses[]
  placeholder_links                                                         branch_placeholders[] @relation("placeholder_person_link")
  person_claims                                                             person_claims[]        @relation("person_claim_person")

  @@index([birth_year])
  @@index([branch_id, generation_number])
  @@index([branch_id])
  @@index([branch_id, is_branch_root])
  @@index([father_id])
  @@index([mother_id])
  @@index([surname, given_name])
}

model relationships {
  relationship_id                           String    @id
  person1_id                                String
  person2_id                                String
  relationship_type                         String    @db.VarChar(50)
  marriage_date                             DateTime? @db.Date
  marriage_place                            String?   @db.VarChar(255)
  divorce_date                              DateTime? @db.Date
  order_number                              Int       @default(1)
  is_current                                Boolean   @default(true)
  notes                                     String?
  created_by                                String?
  created_at                                DateTime  @default(now())
  updated_at                                DateTime
  persons_relationships_person1_idTopersons persons   @relation("relationships_person1_idTopersons", fields: [person1_id], references: [person_id])
  persons_relationships_person2_idTopersons persons   @relation("relationships_person2_idTopersons", fields: [person2_id], references: [person_id])

  @@unique([person1_id, person2_id, relationship_type])
  @@index([person1_id])
  @@index([person2_id])
  @@index([relationship_type])
}

model person_business_addresses {
  address_id           String     @id @db.VarChar(50)
  person_id            String
  geo_city_id          String     @db.VarChar(60)
  label                String?    @db.VarChar(100)
  address_line1        String?    @db.VarChar(255)
  address_line2        String?    @db.VarChar(255)
  postal_code          String?    @db.VarChar(20)
  latitude             Float?
  longitude            Float?
  google_maps_place_id String?    @db.VarChar(255)
  google_maps_url      String?    @db.VarChar(500)
  is_primary           Boolean    @default(false)
  notes                String?
  created_at           DateTime   @default(now())
  updated_at           DateTime   @updatedAt
  person               persons    @relation(fields: [person_id], references: [person_id])
  geo_city             geo_cities @relation(fields: [geo_city_id], references: [city_id])

  @@index([person_id])
  @@index([geo_city_id])
  @@index([is_primary])
}

model branch_placeholders {
  placeholder_id    String                    @id @db.VarChar(50)
  branch_id         String                    @db.VarChar(50)
  created_by        String
  display_name      String                    @db.VarChar(150)
  relation_hint     String?                   @db.VarChar(200)
  approx_birth_year Int?
  notes             String?
  is_public         Boolean                   @default(true)
  status            String                    @default("open") @db.VarChar(20)
  linked_person_id  String?
  geo_city_id       String?                   @db.VarChar(60)
  created_at        DateTime                  @default(now())
  updated_at        DateTime                  @updatedAt
  family_branches   family_branches           @relation(fields: [branch_id], references: [branch_id])
  created_by_user   users                     @relation("placeholder_creator", fields: [created_by], references: [user_id])
  linked_person     persons?                  @relation("placeholder_person_link", fields: [linked_person_id], references: [person_id])
  geo_city          geo_cities?               @relation("placeholder_geo_city", fields: [geo_city_id], references: [city_id])
  claims            branch_placeholder_claims[]

  @@index([branch_id])
  @@index([status])
}

model branch_placeholder_claims {
  claim_id       String               @id @db.VarChar(50)
  placeholder_id String
  branch_id      String               @db.VarChar(50)
  user_id        String
  message        String?              @db.VarChar(1000)
  status         String               @default("pending") @db.VarChar(20)
  resolved_by    String?
  resolved_at    DateTime?
  created_at     DateTime             @default(now())
  updated_at     DateTime             @updatedAt
  placeholder    branch_placeholders  @relation(fields: [placeholder_id], references: [placeholder_id])
  user           users                @relation("placeholder_claim_user", fields: [user_id], references: [user_id])
  resolver       users?               @relation("placeholder_claim_resolver", fields: [resolved_by], references: [user_id])

  @@index([branch_id])
  @@index([status])
}

model root_change_proposals {
  proposal_id                                               String          @id @db.VarChar(50)
  branch_id                                                 String          @db.VarChar(50)
  old_root_person_id                                        String?
  new_root_person_id                                        String?
  new_root_data                                             Json?
  relationship_type                                         String?         @db.VarChar(50)
  proposed_by                                               String
  evidence_documents                                        Json?
  evidence_score                                            Int?
  explanation                                               String?
  status                                                    String          @default("pending") @db.VarChar(50)
  review_deadline                                           DateTime?
  guru_votes                                                Json?
  family_votes                                              Json?
  expert_reviews                                            Json?
  executed_at                                               DateTime?
  execution_log                                             Json?
  people_affected                                           Int?
  generations_shifted                                       Int?
  created_at                                                DateTime        @default(now())
  updated_at                                                DateTime
  family_branches                                           family_branches @relation(fields: [branch_id], references: [branch_id])
  persons_root_change_proposals_new_root_person_idTopersons persons?        @relation("root_change_proposals_new_root_person_idTopersons", fields: [new_root_person_id], references: [person_id])
  persons_root_change_proposals_old_root_person_idTopersons persons?        @relation("root_change_proposals_old_root_person_idTopersons", fields: [old_root_person_id], references: [person_id])
  users                                                     users           @relation(fields: [proposed_by], references: [user_id])

  @@index([branch_id])
  @@index([proposed_by])
  @@index([status])
}

model stories {
  story_id                         String          @id
  branch_id                        String          @db.VarChar(50)
  author_id                        String
  title                            String          @db.VarChar(500)
  content                          String
  story_type                       String          @default("memory") @db.VarChar(50)
  tags                             String[]
  tagged_people                    String[]
  location                         String?         @db.VarChar(255)
  story_date                       DateTime?       @db.Date
  story_year                       Int?
  photos                           Json?
  videos                           Json?
  audio                            Json?
  views_count                      Int             @default(0)
  reactions                        Json            @default("{}")
  comments_count                   Int             @default(0)
  status                           String          @default("pending") @db.VarChar(50)
  approved_by                      String?
  approved_at                      DateTime?
  visibility                       String          @default("family_only") @db.VarChar(50)
  created_at                       DateTime        @default(now())
  updated_at                       DateTime
  documents                        documents[]
  users_stories_approved_byTousers users?          @relation("stories_approved_byTousers", fields: [approved_by], references: [user_id])
  users_stories_author_idTousers   users           @relation("stories_author_idTousers", fields: [author_id], references: [user_id])
  family_branches                  family_branches @relation(fields: [branch_id], references: [branch_id])

  @@index([author_id])
  @@index([branch_id])
  @@index([created_at(sort: Desc)])
  @@index([status])
  @@index([story_type])
  @@index([visibility])
}

model super_guru_assignments {
  assignment_id                                  String        @id
  user_id                                        String
  region_id                                      String
  is_primary                                     Boolean       @default(false)
  created_at                                     DateTime      @default(now())
  created_by                                     String?
  users_super_guru_assignments_created_byTousers users?        @relation("super_guru_assignments_created_byTousers", fields: [created_by], references: [user_id])
  admin_regions                                  admin_regions @relation(fields: [region_id], references: [region_id])
  users_super_guru_assignments_user_idTousers    users         @relation("super_guru_assignments_user_idTousers", fields: [user_id], references: [user_id])

  @@unique([user_id, region_id])
  @@index([region_id])
}

model users {
  user_id                                                         String                   @id
  email                                                           String                   @unique @db.VarChar(255)
  password_hash                                                   String                   @db.VarChar(255)
  full_name                                                       String                   @db.VarChar(255)
  birth_year                                                      Int?
  current_location                                                String?                  @db.VarChar(255)
  preferred_language                                              String                   @default("bs") @db.VarChar(10)
  email_verified                                                  Boolean                  @default(false)
  email_verification_token                                        String?                  @db.VarChar(255)
  two_factor_enabled                                              Boolean                  @default(false)
  two_factor_secret                                               String?                  @db.VarChar(255)
  reset_password_token                                            String?                  @db.VarChar(255)
  reset_password_expires                                          DateTime?
  is_active                                                       Boolean                  @default(true)
  last_login                                                      DateTime?
  created_at                                                      DateTime                 @default(now())
  updated_at                                                      DateTime
  global_role                                                     UserGlobalRole           @default(USER)
  audit_log_audit_log_disputed_byTousers                          audit_log[]              @relation("audit_log_disputed_byTousers")
  audit_log_audit_log_user_idTousers                              audit_log[]              @relation("audit_log_user_idTousers")
  branch_members_branch_members_approved_byTousers                branch_members[]         @relation("branch_members_approved_byTousers")
  branch_members_branch_members_invited_byTousers                 branch_members[]         @relation("branch_members_invited_byTousers")
  branch_members_branch_members_user_idTousers                    branch_members[]         @relation("branch_members_user_idTousers")
  disputes_disputes_raised_byTousers                              disputes[]               @relation("disputes_raised_byTousers")
  disputes_disputes_resolved_byTousers                            disputes[]               @relation("disputes_resolved_byTousers")
  documents_documents_uploaded_byTousers                          documents[]              @relation("documents_uploaded_byTousers")
  documents_documents_verified_byTousers                          documents[]              @relation("documents_verified_byTousers")
  family_branches                                                 family_branches[]
  notifications                                                   notifications[]
  partnerships_partnerships_created_byTousers                     partnerships[]           @relation("partnerships_created_byTousers")
  partnerships_partnerships_verified_byTousers                    partnerships[]           @relation("partnerships_verified_byTousers")
  persons_persons_created_byTousers                               persons[]                @relation("persons_created_byTousers")
  persons_persons_verified_byTousers                              persons[]                @relation("persons_verified_byTousers")
  root_change_proposals                                           root_change_proposals[]
  stories_stories_approved_byTousers                              stories[]                @relation("stories_approved_byTousers")
  stories_stories_author_idTousers                                stories[]                @relation("stories_author_idTousers")
  super_guru_assignments_super_guru_assignments_created_byTousers super_guru_assignments[] @relation("super_guru_assignments_created_byTousers")
  super_guru_assignments_super_guru_assignments_user_idTousers    super_guru_assignments[] @relation("super_guru_assignments_user_idTousers")
  branch_person_links_branch_person_links_requested_byTousers     branch_person_links[]    @relation("branch_person_links_requested_byTousers")
  branch_person_links_branch_person_links_source_approved_byTousers branch_person_links[]  @relation("branch_person_links_source_approved_byTousers")
  branch_person_links_branch_person_links_target_approved_byTousers branch_person_links[]  @relation("branch_person_links_target_approved_byTousers")
  guru_business_addresses                                          guru_business_addresses?
  branch_placeholders_created                                      branch_placeholders[]     @relation("placeholder_creator")
  placeholder_claims                                               branch_placeholder_claims[] @relation("placeholder_claim_user")
  placeholder_claims_resolved                                      branch_placeholder_claims[] @relation("placeholder_claim_resolver")
  person_claims_user                                               person_claims[]          @relation("person_claims_user")
  person_claims_resolved                                           person_claims[]          @relation("person_claims_resolver")

  @@index([email])
  @@index([is_active])
}

enum UserGlobalRole {
  USER
  SUPER_GURU
  ADMIN
}
